{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Desarrollo\\\\Varios\\\\NET\\\\tracagames\\\\tracagames\\\\frontend\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { WaitingUser } from './../../models/waitingUser/waiting-user';\nimport { environment } from './../../../environments/environment';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { User } from './../../models/user';\nimport * as signalR from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WaitingRoomService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.users$ = new Subject();\n    this.waitingUser = new WaitingUser(new User(\"\", \"\", false, \"\"), \"\", false);\n    this.users$ = new Subject();\n    this.users = [];\n    this.connectionHub = new signalR.HubConnectionBuilder().withUrl(environment.urlHub).build();\n    !environment.production && this.connectionHub.start().then(result => {\n      console.log(\"SignalR se ha conectado con éxito\");\n    }).catch(function (e) {\n      console.log(\"SignalR no se ha podido conectar: \" + e.Message);\n    });\n    this.onNewUser();\n    this.onRemoveUser();\n  }\n\n  initWaitingUser() {\n    this.waitingUser = new WaitingUser(new User(\"\", \"\", false, \"\"), \"\", false);\n  }\n\n  hasWaitingUser() {\n    return this.waitingUser.isIntroducedNick();\n  }\n\n  onNewUser() {\n    this.connectionHub.on(\"NewAvailableUser\", (userName, email) => {\n      console.log(\"usuario disponible: \" + userName + \" email: \" + email);\n      const user = new User(userName, email, true);\n      this.users.push(user);\n      this.users$.next(this.users);\n    });\n  }\n\n  onRemoveUser() {\n    this.connectionHub.on(\"RemovedUser\", (userName, email) => {\n      console.log(\"usuario ha salido de la sala de espera: \" + userName + \" email: \" + email);\n      this.users = this.users.filter(u => u.email != email);\n      this.users$.next(this.users);\n    });\n  }\n\n  clear() {\n    this.users = [];\n    this.users$.next(this.users);\n  }\n\n  addUser(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      user.email = user.userName + \"@email.com\";\n\n      _this.httpClient.get(environment.urlApi + \"WaitingRoom/GetWaitingUser?email=\" + user.email + \"&gameName=\" + user.gameName).subscribe(waitingUser => {\n        if (waitingUser == null) {\n          _this.connectionHub.send(\"NewUser\", user.userName, user.email).then(done => {\n            _this.waitingUser = new WaitingUser(user, user.getGameName(), true);\n\n            _this.insertUser(_this.waitingUser);\n\n            console.log(\"USUARIO ENVIADO CON EXITO\");\n          }).catch(e => console.log(\"ERROR DE ENVIO: \" + e.Message));\n        } else {\n          console.log(\"El usuario ya está en espera\");\n        }\n      }, error => {\n        console.log(\"Error: \" + error.Message);\n      }); // console.log(\"Email: \" + user.email);     \n\n    })();\n  }\n\n  getUsers$() {\n    return this.users$.asObservable();\n  }\n\n  getWaitingUsers(gameName) {\n    /*  const user1: User = new User(\"Player1\", \"player1@email.com\", true);\r\n      const user2: User = new User(\"Player2\", \"player2@email.com\", true);\r\n      this.users.push(user1);\r\n      this.users.push(user2); */\n    this.httpClient.get(environment.urlApi + \"WaitingRoom/GetWaitingUsers?gameName=\" + gameName).subscribe(waitingUsers => {\n      this.users = [];\n      waitingUsers.forEach(user => {\n        this.users.push(new User(user.userName, user.email, user.logged, user.password));\n      });\n      this.users$.next(this.users);\n    });\n  }\n\n  removeUser(user) {\n    const params = new HttpParams();\n    params.set(\"email\", user.email);\n    params.set(\"gameName\", user.getGameName());\n    console.log(user.email + \"-\" + user.getGameName());\n\n    if (this.waitingUser.userName != null && this.waitingUser.userName != \"\") {\n      const email = user.userName + \"@email.com\"; // console.log(this.waitingUser);\n      // const waitingUser = new WaitingUser(user, user.getGameName(), true);     \n\n      this.httpClient.delete(environment.urlApi + \"WaitingRoom/deleteWaitingUser?info=\" + btoa(email) + \"|\" + btoa(user.getGameName())).subscribe(waitingUser => {\n        this.connectionHub.send(\"RemoveUser\", user.userName, user.email).then(done => {\n          console.log(\"USUARIO ELIMINADO CON EXITO\");\n          this.initWaitingUser();\n        }).catch(e => console.log(\"ERROR DE ENVIO: \" + e.Message));\n      });\n    }\n  }\n\n  insertUser(user) {\n    var header = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const strUser = JSON.stringify(user);\n    this.httpClient.post(environment.urlApi + \"WaitingRoom/addWaitingUser\", strUser, {\n      headers: header\n    }).subscribe(waitingUser => {// this.users.push(waitingUser);\n      // this.users$.next(this.users);\n    });\n    /*   this.httpClient.post<string>(environment.urlApi + \"WaitingRoom/addWaitingUser\", \"user\", { headers: header }).subscribe(\r\n        (id: string) => {\r\n           console.log(\"id: \" + id);\r\n         // this.users.push(waitingUser);\r\n         // this.users$.next(this.users);\r\n         }\r\n       ); */\n  }\n\n}\n\nWaitingRoomService.ɵfac = function WaitingRoomService_Factory(t) {\n  return new (t || WaitingRoomService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nWaitingRoomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WaitingRoomService,\n  factory: WaitingRoomService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Desarrollo/Varios/NET/tracagames/tracagames/frontend/ClientApp/src/app/services/waiting-room/waiting-room.service.ts"],"names":["WaitingUser","environment","Subject","HttpHeaders","HttpParams","User","signalR","i0","i1","WaitingRoomService","constructor","httpClient","users$","waitingUser","users","connectionHub","HubConnectionBuilder","withUrl","urlHub","build","production","start","then","result","console","log","catch","e","Message","onNewUser","onRemoveUser","initWaitingUser","hasWaitingUser","isIntroducedNick","on","userName","email","user","push","next","filter","u","clear","addUser","get","urlApi","gameName","subscribe","send","done","getGameName","insertUser","error","getUsers$","asObservable","getWaitingUsers","waitingUsers","forEach","logged","password","removeUser","params","set","delete","btoa","header","strUser","JSON","stringify","post","headers","ɵfac","WaitingRoomService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,yCAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,sBAAxC;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAc,IAAIV,OAAJ,EAAd;AACA,SAAKW,WAAL,GAAmB,IAAIb,WAAJ,CAAgB,IAAIK,IAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,KAAjB,EAAwB,EAAxB,CAAhB,EAA6C,EAA7C,EAAiD,KAAjD,CAAnB;AACA,SAAKO,MAAL,GAAc,IAAIV,OAAJ,EAAd;AACA,SAAKY,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,IAAIT,OAAO,CAACU,oBAAZ,GAChBC,OADgB,CACRhB,WAAW,CAACiB,MADJ,EAEhBC,KAFgB,EAArB;AAGA,KAAClB,WAAW,CAACmB,UAAb,IAA2B,KAAKL,aAAL,CAAmBM,KAAnB,GAA2BC,IAA3B,CAAgCC,MAAM,IAAI;AACjEC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACH,KAF0B,EAGtBC,KAHsB,CAGhB,UAAUC,CAAV,EAAa;AACpBH,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCE,CAAC,CAACC,OAArD;AACH,KAL0B,CAA3B;AAMA,SAAKC,SAAL;AACA,SAAKC,YAAL;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,SAAKlB,WAAL,GAAmB,IAAIb,WAAJ,CAAgB,IAAIK,IAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,KAAjB,EAAwB,EAAxB,CAAhB,EAA6C,EAA7C,EAAiD,KAAjD,CAAnB;AACH;;AACD2B,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKnB,WAAL,CAAiBoB,gBAAjB,EAAP;AACH;;AACDJ,EAAAA,SAAS,GAAG;AACR,SAAKd,aAAL,CAAmBmB,EAAnB,CAAsB,kBAAtB,EAA0C,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC3DZ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBU,QAAzB,GAAoC,UAApC,GAAiDC,KAA7D;AACA,YAAMC,IAAI,GAAG,IAAIhC,IAAJ,CAAS8B,QAAT,EAAmBC,KAAnB,EAA0B,IAA1B,CAAb;AACA,WAAKtB,KAAL,CAAWwB,IAAX,CAAgBD,IAAhB;AACA,WAAKzB,MAAL,CAAY2B,IAAZ,CAAiB,KAAKzB,KAAtB;AACH,KALD;AAMH;;AACDgB,EAAAA,YAAY,GAAG;AACX,SAAKf,aAAL,CAAmBmB,EAAnB,CAAsB,aAAtB,EAAqC,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACtDZ,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6CU,QAA7C,GAAwD,UAAxD,GAAqEC,KAAjF;AACA,WAAKtB,KAAL,GAAa,KAAKA,KAAL,CAAW0B,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACL,KAAF,IAAWA,KAAlC,CAAb;AACA,WAAKxB,MAAL,CAAY2B,IAAZ,CAAiB,KAAKzB,KAAtB;AACH,KAJD;AAKH;;AACD4B,EAAAA,KAAK,GAAG;AACJ,SAAK5B,KAAL,GAAa,EAAb;AACA,SAAKF,MAAL,CAAY2B,IAAZ,CAAiB,KAAKzB,KAAtB;AACH;;AACK6B,EAAAA,OAAO,CAACN,IAAD,EAAO;AAAA;;AAAA;AAChBA,MAAAA,IAAI,CAACD,KAAL,GAAaC,IAAI,CAACF,QAAL,GAAgB,YAA7B;;AACA,MAAA,KAAI,CAACxB,UAAL,CAAgBiC,GAAhB,CAAoB3C,WAAW,CAAC4C,MAAZ,GAAqB,mCAArB,GAA2DR,IAAI,CAACD,KAAhE,GAAwE,YAAxE,GAAuFC,IAAI,CAACS,QAAhH,EAA0HC,SAA1H,CAAqIlC,WAAD,IAAiB;AACjJ,YAAIA,WAAW,IAAI,IAAnB,EAAyB;AACrB,UAAA,KAAI,CAACE,aAAL,CAAmBiC,IAAnB,CAAwB,SAAxB,EAAmCX,IAAI,CAACF,QAAxC,EAAkDE,IAAI,CAACD,KAAvD,EACKd,IADL,CACW2B,IAAD,IAAU;AAChB,YAAA,KAAI,CAACpC,WAAL,GAAmB,IAAIb,WAAJ,CAAgBqC,IAAhB,EAAsBA,IAAI,CAACa,WAAL,EAAtB,EAA0C,IAA1C,CAAnB;;AACA,YAAA,KAAI,CAACC,UAAL,CAAgB,KAAI,CAACtC,WAArB;;AACAW,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,WALD,EAKGC,KALH,CAKUC,CAAD,IAAOH,OAAO,CAACC,GAAR,CAAY,qBAAqBE,CAAC,CAACC,OAAnC,CALhB;AAMH,SAPD,MAQK;AACDJ,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH;AACJ,OAZD,EAYG2B,KAAK,IAAI;AACR5B,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAY2B,KAAK,CAACxB,OAA9B;AACH,OAdD,EAFgB,CAiBhB;;AAjBgB;AAkBnB;;AACDyB,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKzC,MAAL,CAAY0C,YAAZ,EAAP;AACH;;AACDC,EAAAA,eAAe,CAACT,QAAD,EAAW;AACtB;AACR;AACA;AACA;AACQ,SAAKnC,UAAL,CAAgBiC,GAAhB,CAAoB3C,WAAW,CAAC4C,MAAZ,GAAqB,uCAArB,GAA+DC,QAAnF,EAA6FC,SAA7F,CAAwGS,YAAD,IAAkB;AACrH,WAAK1C,KAAL,GAAa,EAAb;AACA0C,MAAAA,YAAY,CAACC,OAAb,CAAqBpB,IAAI,IAAI;AACzB,aAAKvB,KAAL,CAAWwB,IAAX,CAAgB,IAAIjC,IAAJ,CAASgC,IAAI,CAACF,QAAd,EAAwBE,IAAI,CAACD,KAA7B,EAAoCC,IAAI,CAACqB,MAAzC,EAAiDrB,IAAI,CAACsB,QAAtD,CAAhB;AACH,OAFD;AAGA,WAAK/C,MAAL,CAAY2B,IAAZ,CAAiB,KAAKzB,KAAtB;AACH,KAND;AAOH;;AACD8C,EAAAA,UAAU,CAACvB,IAAD,EAAO;AACb,UAAMwB,MAAM,GAAG,IAAIzD,UAAJ,EAAf;AACAyD,IAAAA,MAAM,CAACC,GAAP,CAAW,OAAX,EAAoBzB,IAAI,CAACD,KAAzB;AACAyB,IAAAA,MAAM,CAACC,GAAP,CAAW,UAAX,EAAuBzB,IAAI,CAACa,WAAL,EAAvB;AACA1B,IAAAA,OAAO,CAACC,GAAR,CAAYY,IAAI,CAACD,KAAL,GAAa,GAAb,GAAmBC,IAAI,CAACa,WAAL,EAA/B;;AACA,QAAI,KAAKrC,WAAL,CAAiBsB,QAAjB,IAA6B,IAA7B,IAAqC,KAAKtB,WAAL,CAAiBsB,QAAjB,IAA6B,EAAtE,EAA0E;AACtE,YAAMC,KAAK,GAAGC,IAAI,CAACF,QAAL,GAAgB,YAA9B,CADsE,CAEtE;AACA;;AACA,WAAKxB,UAAL,CAAgBoD,MAAhB,CAAuB9D,WAAW,CAAC4C,MAAZ,GAAqB,qCAArB,GAA6DmB,IAAI,CAAC5B,KAAD,CAAjE,GAA2E,GAA3E,GAAiF4B,IAAI,CAAC3B,IAAI,CAACa,WAAL,EAAD,CAA5G,EAAkIH,SAAlI,CAA6IlC,WAAD,IAAiB;AACzJ,aAAKE,aAAL,CAAmBiC,IAAnB,CAAwB,YAAxB,EAAsCX,IAAI,CAACF,QAA3C,EAAqDE,IAAI,CAACD,KAA1D,EACKd,IADL,CACW2B,IAAD,IAAU;AAChBzB,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,eAAKM,eAAL;AACH,SAJD,EAKKL,KALL,CAKYC,CAAD,IAAOH,OAAO,CAACC,GAAR,CAAY,qBAAqBE,CAAC,CAACC,OAAnC,CALlB;AAMH,OAPD;AAQH;AACJ;;AACDuB,EAAAA,UAAU,CAACd,IAAD,EAAO;AACb,QAAI4B,MAAM,GAAG,IAAI9D,WAAJ,CAAgB;AACzB,sBAAgB;AADS,KAAhB,CAAb;AAGA,UAAM+D,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe/B,IAAf,CAAhB;AACA,SAAK1B,UAAL,CAAgB0D,IAAhB,CAAqBpE,WAAW,CAAC4C,MAAZ,GAAqB,4BAA1C,EAAwEqB,OAAxE,EAAiF;AAAEI,MAAAA,OAAO,EAAEL;AAAX,KAAjF,EAAsGlB,SAAtG,CAAiHlC,WAAD,IAAiB,CAC7H;AACA;AACH,KAHD;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACK;;AAlH2B;;AAoHhCJ,kBAAkB,CAAC8D,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAIhE,kBAAV,EAA8BF,EAAE,CAACmE,QAAH,CAAYlE,EAAE,CAACmE,UAAf,CAA9B,CAAP;AAAmE,CAAtI;;AACAlE,kBAAkB,CAACmE,KAAnB,GAA2B,aAAcrE,EAAE,CAACsE,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErE,kBAAT;AAA6BsE,EAAAA,OAAO,EAAEtE,kBAAkB,CAAC8D,IAAzD;AAA+DS,EAAAA,UAAU,EAAE;AAA3E,CAAtB,CAAzC","sourcesContent":["import { WaitingUser } from './../../models/waitingUser/waiting-user';\r\nimport { environment } from './../../../environments/environment';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { User } from './../../models/user';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class WaitingRoomService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n        this.users$ = new Subject();\r\n        this.waitingUser = new WaitingUser(new User(\"\", \"\", false, \"\"), \"\", false);\r\n        this.users$ = new Subject();\r\n        this.users = [];\r\n        this.connectionHub = new signalR.HubConnectionBuilder()\r\n            .withUrl(environment.urlHub)\r\n            .build();\r\n        !environment.production && this.connectionHub.start().then(result => {\r\n            console.log(\"SignalR se ha conectado con éxito\");\r\n        })\r\n            .catch(function (e) {\r\n            console.log(\"SignalR no se ha podido conectar: \" + e.Message);\r\n        });\r\n        this.onNewUser();\r\n        this.onRemoveUser();\r\n    }\r\n    initWaitingUser() {\r\n        this.waitingUser = new WaitingUser(new User(\"\", \"\", false, \"\"), \"\", false);\r\n    }\r\n    hasWaitingUser() {\r\n        return this.waitingUser.isIntroducedNick();\r\n    }\r\n    onNewUser() {\r\n        this.connectionHub.on(\"NewAvailableUser\", (userName, email) => {\r\n            console.log(\"usuario disponible: \" + userName + \" email: \" + email);\r\n            const user = new User(userName, email, true);\r\n            this.users.push(user);\r\n            this.users$.next(this.users);\r\n        });\r\n    }\r\n    onRemoveUser() {\r\n        this.connectionHub.on(\"RemovedUser\", (userName, email) => {\r\n            console.log(\"usuario ha salido de la sala de espera: \" + userName + \" email: \" + email);\r\n            this.users = this.users.filter(u => u.email != email);\r\n            this.users$.next(this.users);\r\n        });\r\n    }\r\n    clear() {\r\n        this.users = [];\r\n        this.users$.next(this.users);\r\n    }\r\n    async addUser(user) {\r\n        user.email = user.userName + \"@email.com\";\r\n        this.httpClient.get(environment.urlApi + \"WaitingRoom/GetWaitingUser?email=\" + user.email + \"&gameName=\" + user.gameName).subscribe((waitingUser) => {\r\n            if (waitingUser == null) {\r\n                this.connectionHub.send(\"NewUser\", user.userName, user.email)\r\n                    .then((done) => {\r\n                    this.waitingUser = new WaitingUser(user, user.getGameName(), true);\r\n                    this.insertUser(this.waitingUser);\r\n                    console.log(\"USUARIO ENVIADO CON EXITO\");\r\n                }).catch((e) => console.log(\"ERROR DE ENVIO: \" + e.Message));\r\n            }\r\n            else {\r\n                console.log(\"El usuario ya está en espera\");\r\n            }\r\n        }, error => {\r\n            console.log(\"Error: \" + error.Message);\r\n        });\r\n        // console.log(\"Email: \" + user.email);     \r\n    }\r\n    getUsers$() {\r\n        return this.users$.asObservable();\r\n    }\r\n    getWaitingUsers(gameName) {\r\n        /*  const user1: User = new User(\"Player1\", \"player1@email.com\", true);\r\n          const user2: User = new User(\"Player2\", \"player2@email.com\", true);\r\n          this.users.push(user1);\r\n          this.users.push(user2); */\r\n        this.httpClient.get(environment.urlApi + \"WaitingRoom/GetWaitingUsers?gameName=\" + gameName).subscribe((waitingUsers) => {\r\n            this.users = [];\r\n            waitingUsers.forEach(user => {\r\n                this.users.push(new User(user.userName, user.email, user.logged, user.password));\r\n            });\r\n            this.users$.next(this.users);\r\n        });\r\n    }\r\n    removeUser(user) {\r\n        const params = new HttpParams();\r\n        params.set(\"email\", user.email);\r\n        params.set(\"gameName\", user.getGameName());\r\n        console.log(user.email + \"-\" + user.getGameName());\r\n        if (this.waitingUser.userName != null && this.waitingUser.userName != \"\") {\r\n            const email = user.userName + \"@email.com\";\r\n            // console.log(this.waitingUser);\r\n            // const waitingUser = new WaitingUser(user, user.getGameName(), true);     \r\n            this.httpClient.delete(environment.urlApi + \"WaitingRoom/deleteWaitingUser?info=\" + btoa(email) + \"|\" + btoa(user.getGameName())).subscribe((waitingUser) => {\r\n                this.connectionHub.send(\"RemoveUser\", user.userName, user.email)\r\n                    .then((done) => {\r\n                    console.log(\"USUARIO ELIMINADO CON EXITO\");\r\n                    this.initWaitingUser();\r\n                })\r\n                    .catch((e) => console.log(\"ERROR DE ENVIO: \" + e.Message));\r\n            });\r\n        }\r\n    }\r\n    insertUser(user) {\r\n        var header = new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n        });\r\n        const strUser = JSON.stringify(user);\r\n        this.httpClient.post(environment.urlApi + \"WaitingRoom/addWaitingUser\", strUser, { headers: header }).subscribe((waitingUser) => {\r\n            // this.users.push(waitingUser);\r\n            // this.users$.next(this.users);\r\n        });\r\n        /*   this.httpClient.post<string>(environment.urlApi + \"WaitingRoom/addWaitingUser\", \"user\", { headers: header }).subscribe(\r\n            (id: string) => {\r\n               console.log(\"id: \" + id);\r\n             // this.users.push(waitingUser);\r\n             // this.users$.next(this.users);\r\n             }\r\n           ); */\r\n    }\r\n}\r\nWaitingRoomService.ɵfac = function WaitingRoomService_Factory(t) { return new (t || WaitingRoomService)(i0.ɵɵinject(i1.HttpClient)); };\r\nWaitingRoomService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: WaitingRoomService, factory: WaitingRoomService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}